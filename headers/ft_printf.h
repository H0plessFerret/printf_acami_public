/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: acami <acami@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/04/21 14:23:08 by acami             #+#    #+#             */
/*   Updated: 2021/04/25 18:40:27 by acami            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef FT_PRINTF_H
# define FT_PRINTF_H

# include <stdlib.h>
# include <stdarg.h>
# include <unistd.h>

# define	SPEC_D_I			1
# define	SPEC_U				2
# define	SPEC_O				4
# define	SPEC_X				8
# define	SPEC_X_UPPERCASE	16
# define	SPEC_F				32
# define	SPEC_E				64
# define	SPEC_G				128
# define	SPEC_A				256
# define	SPEC_C				512
# define	SPEC_S				1024
# define	SPEC_P				2048
# define	SPEC_N				4096
# define	SPEC_PERCENT		8192

# define	SPEC_MINUS			16384
# define	SPEC_PLUS			32768
# define	SPEC_SPACE			65536
# define	SPEC_HASHTAG		131072
# define	SPEC_ZERO			262144

# define	SPEC_NUM			524288
# define	SPEC_ASTERISK		1048576

# define	SPEC_DOTNUM			2097152
# define	SPEC_DOTASTERISK	4194304

# define	SPEC_HH				8388608
# define	SPEC_H				16777216
# define	SPEC_L				33554432
# define	SPEC_LL				67108864
# define	SPEC_J				134217728
# define	SPEC_Z				268435456
# define	SPEC_T				536870912
# define	SPEC_L_UPPERCASE	1073741824

# define	SPEC_HAS_FLAGS		507904
# define	SPEC_HAS_WIDTH		1572864
# define	SPEC_HAS_PRESCISION	6291456
# define	SPEC_HAS_LENGTH		2139095040

# define	SPEC_IS_FLOAT		480
# define	SPEC_IS_UNSIGNED	30
# define	SPEC_IS_NUMBER		2559

typedef struct s_mask
{
	uint32_t	mask;
	int			width;
	int			prescision;
}				t_mask;

int			ft_printf(const char *format_spec, ...);

// prints symbols into standart output while % was not encountered
// returns the amount of symbols printed
int			ft_print_till_percent(const char **format_spec);

// returns an integer - an amount of symbols read in format_spec
// modifies mask with all found flags
int			ft_mask_flags(const char *format_spec, t_mask *mask);

// returns an integer - an amount of symbols read in format_spec
// modifies mask with all found width parameters
int			ft_mask_width(const char *format_spec, t_mask *mask);

// returns an integer - an amount of symbols read in format_spec
// modifies mask with all found prescision parameters
int			ft_mask_prescision(const char *format_spec, t_mask *mask);

// returns an integer - an amount of symbols read in format_spec
// modifies mask with all found length parameters
int			ft_mask_length(const char *format_spec, t_mask *mask);

// returns unsigned integer, representing a configuration of all specifiers
// (README.md holds more information)
t_mask		*ft_generate_mask(const char **format_spec, t_mask *mask);

// returns a pointer to a function which will print the requested value
int			(*ft_find_corresponding_print(t_mask *mask))(void *, t_mask *);

// returns void pointer to the next element from the stack
void		*ft_extract_info_from_arglist(va_list *arg_list, t_mask *mask);

// prints prefix to the actual data
int			ft_print_prefix(t_mask *mask, void *data, char sign);

// prints postfix to the actual data
int			ft_print_postfix(t_mask *mask, int printed_already);

// prints data using func generated by ft_find_corresponding_print
int			ft_print_by_arg(va_list *arg_list, t_mask *mask,
				int (*func)(void *, t_mask *));

#endif
